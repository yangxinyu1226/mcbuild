# This is a template for a new Minecraft generator script.
# Placeholders will be replaced by the GeneratorDesigner.

import os
import sys
import json
import argparse

# Add root directory to sys.path
current_dir = os.path.dirname(os.path.abspath(__file__))
sys.path.append(os.path.join(current_dir, '..'))

from src.util import get_llm_client, get_llm_response, write_json_file, generate_blocks_from_task
from src.key_manager import get_next_api_key

BUILD_DIR = os.path.join(current_dir, '../build')

class ##CLASS_NAME##:
    """
    ##DOCSTRING##
    """
    def __init__(self, llm_client):
        self.llm_client = llm_client

    def generate(self, description: str) -> dict:
        """
        The core method that generates the build plan.
        """
        print(f"##CLASS_NAME##: Generating for: {description}")

        system_prompt = """##SYSTEM_PROMPT##"""
        
        user_prompt = f"Design task: {description}"
        
        success, llm_output = get_llm_response(self.llm_client, system_prompt, user_prompt)

        if not success:
            print(f"##CLASS_NAME##: LLM call failed. Response: {llm_output}")
            return { "description": description, "blocks": [] }

        # Robustness: Handle if LLM returns a dict with a key like 'components' or 'blocks'
        processed_output = []
        if isinstance(llm_output, list):
            processed_output = llm_output
        elif isinstance(llm_output, dict):
            for key in ['components', 'blocks', 'design', 'parts']:
                if key in llm_output and isinstance(llm_output[key], list):
                    processed_output = llm_output[key]
                    print(f"##CLASS_NAME##: Found list in dictionary under key '{key}'.")
                    break
        
        if not processed_output:
            print(f"##CLASS_NAME##: Failed to extract a valid list from LLM. Response: {llm_output}")
            return { "description": description, "blocks": [] }
        
##GENERATOR_LOGIC##

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='A dynamically generated Minecraft AI Builder generator.')
    parser.add_argument('--name', type=str, required=True, help='Name of the task.')
    parser.add_argument('--prompt', type=str, required=True, help='Natural language prompt for generation.')
    args = parser.parse_args()

    try:
        api_key = get_next_api_key()
        llm_client = get_llm_client(api_key)

        generator = ##CLASS_NAME##(llm_client)
        build_plan = generator.generate(args.prompt)

        output_filename = f"{args.name}_{os.path.splitext(os.path.basename(__file__))[0]}.json"
        output_filepath = os.path.join(BUILD_DIR, output_filename)
        write_json_file(output_filepath, build_plan)
        print(f"##CLASS_NAME##: Saved build plan to {output_filepath}")

    except Exception as e:
        print(f"An error occurred in ##CLASS_NAME##: {e}")
        import traceback
        traceback.print_exc()
